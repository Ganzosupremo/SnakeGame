//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/SnakeControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SnakeInput
{
    public partial class @SnakeControl : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @SnakeControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""SnakeControl"",
    ""maps"": [
        {
            ""name"": ""Snake"",
            ""id"": ""3a53ddab-3180-46c7-963e-eb1c79fd3c1c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3f4b2961-ae43-4915-9297-a4c03032af77"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""dc006e9b-f49a-4948-a5be-a52318cf925e"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""9c8f41df-7751-4071-be2a-9c2c4e8b814d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""192fd7d4-8222-4d55-ade4-18255eb672bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""7b2a4269-277e-4b14-afd9-536ff955bbac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchWeapons"",
                    ""type"": ""Value"",
                    ""id"": ""147acacf-5ca4-43d4-80c8-84c858b2a3d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SetWeaponAtFirstPos"",
                    ""type"": ""Button"",
                    ""id"": ""ae880602-9c8f-4f4b-9037-395159eddd55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard Movement"",
                    ""id"": ""c4542f08-6f40-400b-9329-089e9afbddf7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fc96d8f1-72f2-411f-a6e8-81ee5ad6f156"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2fe5c387-3fee-4f36-91fe-8abfee6587f2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8e44924c-4fa3-443c-84f2-2920d2710b05"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1072ce8d-daa4-488e-b849-5597739712f2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb3142cf-381e-4f31-9acb-1ad077bd44c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ce8d00a9-c89f-4bf8-929f-12db422e11db"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b9a7548c-cef9-4195-81ab-9ced8b57e395"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b0a882dd-5fb2-40d4-9a21-058ae9b5e4e8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""73f671c5-d274-4e83-8683-20be1650a099"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d36c2aea-60be-409a-b70f-7b7193c263da"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ace5cfc8-aea7-41be-b028-726f60682b38"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77d59a93-bddb-43d9-87d6-a5db698a9ebc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b081f67-9b43-4b7f-8125-607fa4e80c40"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5884911-7f4a-43c8-a0d4-79b51205cdde"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07c7ff7f-ffca-431b-9be6-849b35ce3eb7"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42f7727b-8bff-4448-ac9e-759d563cd73c"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SwitchWeapons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""68baca70-d749-4e9e-99fa-9972f4bcf303"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetWeaponAtFirstPos"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8bdfc9d8-957d-46a3-91e6-2d13e606e22b"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SetWeaponAtFirstPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b218e6c8-e4f8-4194-ab88-eadf76c3ff73"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SetWeaponAtFirstPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Snake
            m_Snake = asset.FindActionMap("Snake", throwIfNotFound: true);
            m_Snake_Move = m_Snake.FindAction("Move", throwIfNotFound: true);
            m_Snake_Aim = m_Snake.FindAction("Aim", throwIfNotFound: true);
            m_Snake_Dash = m_Snake.FindAction("Dash", throwIfNotFound: true);
            m_Snake_Fire = m_Snake.FindAction("Fire", throwIfNotFound: true);
            m_Snake_Reload = m_Snake.FindAction("Reload", throwIfNotFound: true);
            m_Snake_SwitchWeapons = m_Snake.FindAction("SwitchWeapons", throwIfNotFound: true);
            m_Snake_SetWeaponAtFirstPos = m_Snake.FindAction("SetWeaponAtFirstPos", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Snake
        private readonly InputActionMap m_Snake;
        private ISnakeActions m_SnakeActionsCallbackInterface;
        private readonly InputAction m_Snake_Move;
        private readonly InputAction m_Snake_Aim;
        private readonly InputAction m_Snake_Dash;
        private readonly InputAction m_Snake_Fire;
        private readonly InputAction m_Snake_Reload;
        private readonly InputAction m_Snake_SwitchWeapons;
        private readonly InputAction m_Snake_SetWeaponAtFirstPos;
        public struct SnakeActions
        {
            private @SnakeControl m_Wrapper;
            public SnakeActions(@SnakeControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Snake_Move;
            public InputAction @Aim => m_Wrapper.m_Snake_Aim;
            public InputAction @Dash => m_Wrapper.m_Snake_Dash;
            public InputAction @Fire => m_Wrapper.m_Snake_Fire;
            public InputAction @Reload => m_Wrapper.m_Snake_Reload;
            public InputAction @SwitchWeapons => m_Wrapper.m_Snake_SwitchWeapons;
            public InputAction @SetWeaponAtFirstPos => m_Wrapper.m_Snake_SetWeaponAtFirstPos;
            public InputActionMap Get() { return m_Wrapper.m_Snake; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SnakeActions set) { return set.Get(); }
            public void SetCallbacks(ISnakeActions instance)
            {
                if (m_Wrapper.m_SnakeActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnMove;
                    @Aim.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnAim;
                    @Dash.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnDash;
                    @Fire.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnFire;
                    @Fire.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnFire;
                    @Fire.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnFire;
                    @Reload.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnReload;
                    @Reload.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnReload;
                    @Reload.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnReload;
                    @SwitchWeapons.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnSwitchWeapons;
                    @SwitchWeapons.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnSwitchWeapons;
                    @SwitchWeapons.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnSwitchWeapons;
                    @SetWeaponAtFirstPos.started -= m_Wrapper.m_SnakeActionsCallbackInterface.OnSetWeaponAtFirstPos;
                    @SetWeaponAtFirstPos.performed -= m_Wrapper.m_SnakeActionsCallbackInterface.OnSetWeaponAtFirstPos;
                    @SetWeaponAtFirstPos.canceled -= m_Wrapper.m_SnakeActionsCallbackInterface.OnSetWeaponAtFirstPos;
                }
                m_Wrapper.m_SnakeActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                    @Fire.started += instance.OnFire;
                    @Fire.performed += instance.OnFire;
                    @Fire.canceled += instance.OnFire;
                    @Reload.started += instance.OnReload;
                    @Reload.performed += instance.OnReload;
                    @Reload.canceled += instance.OnReload;
                    @SwitchWeapons.started += instance.OnSwitchWeapons;
                    @SwitchWeapons.performed += instance.OnSwitchWeapons;
                    @SwitchWeapons.canceled += instance.OnSwitchWeapons;
                    @SetWeaponAtFirstPos.started += instance.OnSetWeaponAtFirstPos;
                    @SetWeaponAtFirstPos.performed += instance.OnSetWeaponAtFirstPos;
                    @SetWeaponAtFirstPos.canceled += instance.OnSetWeaponAtFirstPos;
                }
            }
        }
        public SnakeActions @Snake => new SnakeActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface ISnakeActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnSwitchWeapons(InputAction.CallbackContext context);
            void OnSetWeaponAtFirstPos(InputAction.CallbackContext context);
        }
    }
}
